class Product:
    
    CATEGORIES = {
        0: "Electronics",
        1: "Clothing", 
        2: "Home",
        3: "Grocery",
        4: "Books",
        5: "Toys",
        6: "Sports",
        7: "Beauty",
        8: "Automotive",
        9: "Others"
    }
    #Initialize constructor
        # items:
        #   product_id
        #   name of the product
        #   category
        #   quantity, set to 0 as default
        #   price (float), set to 0.0 as default
        #   reorder_level - set to 0 as defalt
    
    def __init__(self, product_id, name, category, quantity = 0, price = 0.0, reorder_level = 0):
        self.product_id = product_id
        self.name = name
        self.category = category
        self.quantity = quantity
        self.price = price
        self.reorder_level = reorder_level

    # Getter methods
    def get_category_name(self):
        #return the category name using static mapping
        return self.CATEGORIES.get(self.category, "Unknown Category")

    def needs_restock(self):
        #check if product needs restocking
        return self.quantity <= self.reorder_level

    def restock(self, amount):
        #increase quantity by specific amount.
        if amount > 0:
            self.quantity += amount
            return True
        return False

    def sell(self, amount):
        #sell specified amount if enough stock is available
        if amount > 0 and self.quantity >= amount:
            self.quantity -= amount
            return True
        return False

# Setter methods (all except quantity)
    def set_product_id(self, product_id):
        self.product_id = product_id

    def set_name(self, name):
        self.name = name

    def set_category(self, category):
        self.category = category

    def set_price(self, price):
        self.price = price

    def set_reorder_level(self, reorder_level):
        self.reorder_level = reorder_level

    def __str__(self):
        # Return formatted string.
        return f"{self.product_id} {self.name} {self.get_category_name()} {self.quantity} {self.price:.2f}"
