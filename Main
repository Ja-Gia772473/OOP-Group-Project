import csv
import os

class Product:
    
    CATEGORIES = {
        0: "Electronics",
        1: "Clothing", 
        2: "Home",
        3: "Grocery",
        4: "Books",
        5: "Toys",
        6: "Sports",
        7: "Beauty",
        8: "Automotive",
        9: "Others"
    }
    #Initialize constructor
        # items:
        #   product_id
        #   name of the product
        #   category
        #   quantity, set to 0 as default
        #   price (float), set to 0.0 as default
        #   reorder_level - set to 0 as defalt
    
    def __init__(self, product_id, name, category, quantity = 0, price = 0.0, reorder_level = 0):
        self.product_id = product_id
        self.name = name
        self.category = category
        self.quantity = quantity
        self.price = price
        self.reorder_level = reorder_level

    # Getter methods
    def get_category_name(self):
        #return the category name using static mapping
        return self.CATEGORIES.get(self.category, "Unknown Category")

    def needs_restock(self):
        #check if product needs restocking
        return self.quantity <= self.reorder_level

    def restock(self, amount):
        #increase quantity by specific amount.
        if amount > 0:
            self.quantity += amount
            return True
        return False

    def sell(self, amount):
        #sell specified amount if enough stock is available
        if amount > 0 and self.quantity >= amount:
            self.quantity -= amount
            return True
        return False

# Setter methods (all except quantity)
    def set_product_id(self, product_id):
        self.product_id = product_id

    def set_name(self, name):
        self.name = name

    def set_category(self, category):
        self.category = category

    def set_price(self, price):
        self.price = price

    def set_reorder_level(self, reorder_level):
        self.reorder_level = reorder_level

    def __str__(self):
        # Return formatted string.
        return f"{self.product_id} {self.name} {self.get_category_name()} {self.quantity} {self.price:.2f}"

# PART 2

def load_products(filename): # ID, Name, Category Idnex. Quantity, Price, Reorder Level. CVS file order.
    products = []
    with open(filename, 'r') as file:
        csv_reader = csv.reader(file)
        for row in csv_reader:
            product_id = row[0]
            name = row[1]
            category_index = row[2]
            quantity = row[3]
            price = row[4]
            reorder_level = row[5]

            product = Product(product_id, name, category_index, quantity, price, reorder_level)
            products.append(product)
    
    return products

def save_products(filename, products):
    pass

def print_menu():
    print("*************************************************")
    print("* Welcome to Smart Inventory Management System * ")
    print("*************************************************")
    print("1.  Add Product")
    print("2.  Remove Product")
    print("3.  Edit Product")
    print("4.  Search Product")
    print("5.  Sell Product")
    print("6.  Restock Product")
    print("7.  Low Stock Report")
    print("8.  Inventory Summary")
    print("9.  List Products by Category")
    print("10. Display All Products")
    print("11. Save and Exit")

    selection = int(input("Enter your choice (1-11): "))
    if selection is None:
        selection = 0
    return selection

def search_product(product, term):
    pass

def add_product(products):
    pass

def remove_product(products):
    pass

def edit_product(products):
    pass

def sell_product(products):
    pass

def restock_product(products):
    pass

def low_stock_report(products):
    pass

def inventory_summary(products):
    print("\n--- Inventory Summary ---")
    if len(products) == 0:
        print("No products in inventory.")
        return

    total_products = len(products)
    total_quantity = 0

    for p in products:
        total_quantity += p.get_quantity()

    print(f"\nTotal Products: {total_products}")
    print(f"Total Quantity: {total_quantity}")

def list_products_by_category(products):
    pass

def product_index(products):
    pass

def print_products(products):
    if len(products) == 0:
        print("No products to display.")
        return
    print(f"\n{'ID':<10} {'Name':<20} {'Category':<18} {'Qty':<5} {'Price':<10}")
    print("-" * 64)
    for p in products:
        print(f"{p.get_product_id():<10} {p.get_name():<20} {p.get_category_name():<18} {p.get_quantity():<5} ${p.get_price():<9.2f}")


#Main code here...

def main():
    filename = "inventory.csv"
    products = load_products(filename)

    while True:
        choice = print_menu()
        if choice == 1:
            add_product(products)
        elif choice == 2:
            remove_product(products)
        elif choice == 3:
            edit_product(products)
        elif choice == 4:
            search_product(products, term)
        elif choice == 5:
            sell_product(products)
        elif choice == 6:
            restock_product(products)
        elif choice == 7:
            low_stock_report(products)
        elif choice == 8:
            inventory_summary(products)
        elif choice == 9:
            list_products_by_category(products)
        elif choice == 10:
            print("\n--- All Products ---")
            print_products(products)
        elif choice == 11:
            save_products(filename, products)
            print("\nThank you for using Smart Inventory Management System!")
            break
        else:
            print("Invalid choice! Please select 1-11.")

if __name__ == "__main__":
    main()
